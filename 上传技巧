Webshell常用的PHP函数
Webshell几乎适用于所有Web编程语言。之所以关注PHP，是因为它是web上使用最广泛的编程语言。下面是PHP中一些执行shell命令最常用的函数。

system()

system()函数将命令作为参数，并输出结果。

下面的示例是在Windows操作系统上运行dir命令，然后返回PHP文件所在目录的目录列表。



类似地，在Linux机器上执行ls命令也会得到类似的结果。



exec()

exec()功能是将命令作为参数，但不输出结果。如果指定了第二个可选参数，则返回结果为数组。否则，如果回显，只显示结果的最后一行。



用exec()函数执行echo命令，只会输出最后一行命令结果。



如果指定了第二个参数，则返回结果为数组。



shell_exec()

shell_exec()函数类似于exec()，但是，其整个输出结果为字符串。



passthru()

passthru()执行一个命令并返回原始格式的输出。



proc_open()

proc_open()函数可能很难理解。简单地说，我们可以使用proc_open()，创建一个处理程序（流程），实现脚本和要运行的程序之间的通信。

倒引号

很多PHP开发人员并没有意识到这一点，但是PHP会首先执行shell命令中倒引号（`）内的内容。请注意，倒引号（`）和单引号（’）不同。



根据以上内容，下面是一个最简单的PHP Webshell。



它使用 system()函数来执行通过 ‘cmd’ HTTP 请求中GET参数传递过来的命令。



我们已经确定了这些函数（以及其他一些函数）可能非常危险。更危险的是，在安装PHP时，默认情况下会启用所有这些内置PHP命令，而大多数系统管理员不会禁用这些函数。如果不确定在系统上是否启用了这些函数，输入以下内容将返回已启用的危险函数的列表。



在采用默认安装的情况下，下列函数是默认启用的。



黑客如何隐藏Webshell

修改报头

黑客使用用户代理字符串而不是通过$_POST 请求参数来传递命令的。



然后，黑客可以通过将命令放在User-Agent HTTP报头中来制作特定的HTTP请求。



在服务器日志中可以看到这一行为的效果，其中第二个请求中的HTTP User-Agent被cat /etc/passwd命令替换了。



上述方法会产生很大噪声，可以很容易地提示管理员查看服务器日志。但采用下列方法，管理员这很难发现。



这种方法没有留下关于执行命令的任何可见轨迹（至少在访问日志中是这样）。



隐藏在正常文件中

黑客用来隐藏Webshell最简单的一个方法是将它们上传到深层子目录中和/或使用随机名称。



此外，一种更有效的方法是将Webshell代码嵌入到现有的合法文件中。



或使用CMS（例如WordPress）





注意：黑客通常会在函数前使用@运算符，以防发生任何错误，写入错误日志。
